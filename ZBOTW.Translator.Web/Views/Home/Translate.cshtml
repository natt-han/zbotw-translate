<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.css" integrity="sha512-6S2HWzVFxruDlZxI3sXOZZ4/eJ8AcxkQH1+JjSe/ONCEqR9L4Ysq5JdT5ipqtzU7WHalNwzwBv+iE51gNHJNqQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/regular.css" />
<link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/fontawesome.css" integrity="sha384-eHoocPgXsiuZh+Yy6+7DsKAerLXyJmu2Hadh4QYyt+8v86geixVYwFqUvMU8X90l" crossorigin="anonymous"/>
<style type="text/css" media="screen and (max-width:745px)">
    .text-control{
        width: 300px;
    }
    .preview {
        width: 300px;
    }
    .main-col{
        min-width:670px
    }
</style>
<style type="text/css" media="screen and (min-width:746px)">
    .text-control{
        width: 330px;
    }
    .preview {
        width: 330px;
    }
    .main-col{
        min-width:730px
    }
</style>

<style>
td{
   vertical-align:top; 
}
textarea {
    resize: none;
    overflow-x: hidden;
    overflow-y: hidden;
    min-height: 30px;
    
    white-space: pre;
    overflow-wrap: normal;
    /*overflow-x: scroll;*/
}
.preview {
    border: solid orange 1px;
    font-family: inherit;
    font-size: .875rem;
    padding: 4px 8px;
}
.list-group-item{
    padding: 0.2em 0.5em;
}
.entry-name{
    max-width:150px
}
.navbar-text{
    font-weight:bold;
}
</style>
<div id="main-div">
    
    <div class="row gx-2">        
        <div id="col-filelist" class="col-auto d-none d-xl-block" style="overflow-x:hidden; font-size:.7em;height:100vh;">
            <input type="text" v-model="fileNameFilter" class="form-control form-control-sm" />
            <div class="btn-group btn-group-sm" role="group" aria-label="">
              <button type="button" class="btn btn-outline-secondary" v-bind:class="{active:fileGroupFilter==''}" v-on:click="selectGroup('')">All</button>              
              <button type="button" class="btn btn-outline-success" v-bind:class="{active:fileGroupFilter=='Completed'}" v-on:click="selectGroup('Completed')">Completed</button>
              <button type="button" class="btn btn-outline-warning" v-bind:class="{active:fileGroupFilter=='Incompleted'}" v-on:click="selectGroup('Incompleted')">Incomplete</button>
            </div>
            <div class="list-group" style="min-width:240px">
              <button v-for="file in filteredFileList" class="list-group-item list-group-item-action" v-bind:class="{active:selectedFile.fileName==file.fileName,'list-group-item-success':(file.isCompleted || file.translatedText==file.text),'list-group-item-warning':(!file.isCompleted && file.translatedText>0)}" v-on:click="select(file)" >{{file.fileName}} <span v-if="file.isCompleted==false&&file.translatedText<file.text">({{file.translatedText}}/{{file.text}})</span></button>
            </div>
        </div>
        <div class="col-sm-12 d-xl-none">
            <button type="button" class="btn btn-sm btn-outline-dark" onclick="ShowFileList()">Change file</button>            
        </div>
        <div class="col">
            <div class="row"> 
                <div class="col-auto">
                    <h5>{{messageTable.fileName}}</h5>
                </div>
                <div class="col-auto">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" v-model="messageTable.isCompleted" value="true" id="flexCheckDefault">
                      <label class="form-check-label" for="flexCheckDefault">
                        Completed
                      </label>
                    </div>
                </div>
                <div class="col-sm-2 col-sm-offset-1">
                    <button type="button" class="btn-primary btn" v-on:click="save()">Save</button>
                </div>
            </div>
            
            <div style="height:100vh;overflow-y:scroll">
                <table id="main-table" class="table" style="transform-origin: top left;">
                <tbody >
                    <tr v-for="item in messageTable.entryList">
                        <td>
                            <div class="row gx-2">
                                <div class="col-xl-6 col-xxl-3 col-sm-12">
                                    <span class="text-break fw-bold">
                                        {{item.entryName}} <span v-if="item.npc">({{item.npc}})</span>
                                        <a v-if="item.choices" data-bs-toggle="collapse" v-bind:href="'#choice-'+item.entryName">
                                            <i  class="far fa-info-circle"></i>
                                        </a>
                                                                                
                                    </span>
                                    <div v-if="item.choices" class="collapse" v-bind:id="'choice-'+item.entryName"><pre>{{getChoices(item.choices)}}</pre></div>
                                </div>
                                <div class="col main-col">
                                    <div v-for="text in item.textList" class="row gx-2">                                
                                        <div class="col-auto">
                                            <div class="input-group input-group-sm text-control">
                                                <span v-if="text.variable" class="input-group-text" v-bind:title="text.variable">@@</span>
                                                <textarea type="text" class="form-control" v-bind:id="'txt-translated-'+text.line" v-bind:style="text.colour?'color:'+text.colour:''" v-model="text.translatedText" ></textarea>
                                            </div>
                                        </div>
                                        <div class="col-auto">
                                            <button type="button" class="btn btn-sm btn-outline-dark" v-on:click="copyOrigin(text)" tabindex="-1"><i class="far fa-copy"></i></button>
                                        </div>
                                        <div class="col-auto">
                                            <textarea type="text" class="text-control form-control form-control-sm" v-bind:id="'txt-original-'+text.line" v-bind:style="text.colour?'color:'+text.colour:''" readonly tabindex="-1">{{text.variable?'['+text.variable+']':''}}{{text.originalText}}</textarea>
                                        </div>
                                    </div>
                                    <div v-if="item.textList.length>1" class="row gx-2">                                
                                        <div class="col-auto">
                                            Preview
                                            <pre class="preview"><span v-for="text in item.textList" v-bind:style="text.colour?'color:'+text.colour:''"><span v-if="text.variable">[{{text.variable}}]</span>{{text.translatedText}}</span></pre>
                                        </div>
                                        <div class="col-auto">
                                            <div style="width:30.25px"></div>
                                        </div>
                                        <div class="col-auto">
                                            Preview
                                            <pre class="preview"><span v-for="text in item.textList"  v-bind:style="text.colour?'color:'+text.colour:''"><span v-if="text.variable">[{{text.variable}}]</span>{{text.originalText}}</span></pre>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>        
                </tbody>
            </table>
            </div>
            
        </div>
    </div>
    
</div>

@section Scripts{
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14"></script>
<script>
    var isChanged = false;
    var lsSelectedFile = localStorage.getItem('selectedFile');
    var lsFileGroup = localStorage.getItem('fileGroup') ?? "Incompleted";
    window.onbeforeunload = function () {
        if (isChanged) {
            return true
	    }
    };
    var vue = new Vue({
        el:"#main-div",
        data:{
            progress:{
                totalText:100,
                totalTranslatedText:100,
            },
            fileList:[],
            selectedFile:{},
            fileNameFilter:"",
            fileGroupFilter:lsFileGroup,
            messageTable:{
                fileName:"",
                entryList:[]
            }
        },
        computed:{
            filteredFileList(){
                var filter = this.fileNameFilter.toLowerCase()
                if(filter!=""){
                    return this.fileList.filter(x=>x.fileName.toLowerCase().includes(filter));
                }
                if(this.fileGroupFilter==""){
                    this.fileNameFilter = "";
                    return this.fileList;
                }else if(this.fileGroupFilter=="Completed"){
                    return this.fileList.filter(x=>x.isCompleted);
                }else if(this.fileGroupFilter=="Incompleted"){
                    return this.fileList.filter(x=>!x.isCompleted);
                }
            },
            totalText(){
                var total = 0;
                 this.fileList.reduce(function(prev,cur){ total += cur.text });
                 return total;
            },
            totalTranslatedText(){
                var total = 0;
                return this.fileList.reduce(function(prev,cur){ total += cur.translatedText });
            },
            choiceList(){
                return this.messageTable.entryList.filter(x=>!isNaN(x.entryName));
            }
        },
        methods:{
            getChoices(choices){
                var temp = "";
                var choice_labels = this.choiceList.filter(x=>choices.includes(Number(x.entryName)));
                choice_labels.forEach(element => temp+= element.entryName+":"+element.textList[0].translatedText +"("+ element.textList[0].originalText + ")"+"\n");
                return temp;
            },
            selectGroup(group){
                this.fileGroupFilter = group;
                localStorage.setItem('fileGroup',group);
            },
            select(file){
                if (isChanged) {
                    if(!confirm("Change file?\nChanges you made may not be saved.")){
                        $("#col-filelist").addClass("d-none");
                        return;
                    }
                }
                this.selectedFile=file;
                this.getMessageTable(file.fileName);
                localStorage.setItem('selectedFile',file.fileName);
                $("#col-filelist").addClass("d-none");
            },
            getMessageTable:function(fileName){
                var v = this;
                $.ajax({
                    url:"@Url.Action("GetMessageTable")",
                    data:{fileName:fileName},
                    dataType:"json"
                }).done(function(result){
                    v.messageTable=result;
                    Vue.nextTick(function(){
                        v.updateTextareaHeight()
                    })
                }).fail(function(){
                    console.log('fail');
                });
            },
            copyOrigin:function(text){
                isChanged = true;
                text.translatedText=text.originalText;
                var v = this;
                Vue.nextTick(function(){
                    v.auto_grow($("#txt-translated-"+text.line)[0]);
                })                
            },
            save(){
                var v = this;
                $.post({
                    url:"@Url.Action("Save")",
                    contentType:"application/json",
                    data:JSON.stringify(this.messageTable),
                }).done(function(result){
                    v.progress = result.progress;
                    v.selectedFile.translatedText = result.currentTranslatedText;
                    v.selectedFile.isCompleted = v.messageTable.isCompleted || v.selectedFile.text==v.selectedFile.translatedText;
                    toastr.success("Saved");
                    v.updateProgress();
                    isChanged = false;
                }).fail(function(){
                    toastr.error("Error!");
                });
            },            
            auto_grow:function(element) {
                element.style.height = "5px";
                element.style.height = (element.scrollHeight)+"px";
            },
            updateTextareaHeight:function(){
                $("textarea").each(function(index,element){
                    element.style.height = "5px";
                    element.style.height = (element.scrollHeight)+"px";
                });
            },
            updateProgress(){
                $("#navbar-percent-completed").html((this.progress.totalTranslatedText/this.progress.totalText*100.0).toFixed(2)).attr("title",this.progress.totalTranslatedText+"/"+this.progress.totalText);
            }
        },
        created: function(){
            var v = this;
            $.ajax({url:"@Url.Action("GetFileList")",dataType:"json"})            
            .done(function(result){
                v.fileList = result.files;
                v.progress = result.progress;
                if(lsSelectedFile){
                    var selectedFile = v.fileList.filter(x=>x.fileName==lsSelectedFile);
                    if(selectedFile && selectedFile[0]){
                        v.select(selectedFile[0]);
                    }else{
                        v.select(v.filteredFileList[0]);
                    }                    
                }else{
                    v.select(v.filteredFileList[0]);
                }
                v.updateProgress();
            });
        }
    });
    $().ready(function(){
        $("#main-div").on("input","textarea",auto_grow)
        function auto_grow(e) {
            var element=e.target;
            element.style.height = "5px";
            element.style.height = (element.scrollHeight)+"px";
        }
        $("#main-div").on("change","input,textarea",function(){isChanged=true;});
        if(window.innerWidth<745){
            scaleBasedOnWindow($("#main-table")[0],1,true);
        }
        //$("#ddl-filelist").select2();
    });
    function ShowFileList(){
        $("#col-filelist").removeClass("d-none");
    }
    function scaleBasedOnWindow(elm, scale=1, fit=false){
    if(!fit){
        elm.style.transform='scale('+Math.min(elm.clientWidth/window.innerWidth,elm.clientHeight/window.innerHeight)+')';
    }else{
        elm.style.transform='scale('+(window.innerWidth/715)+')';
    }
}
</script>
}